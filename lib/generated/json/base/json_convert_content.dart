// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:bilibili_flutter/model/member_entity.dart';
import 'package:bilibili_flutter/model/region_entity.dart';
import 'package:bilibili_flutter/model/test_entity.dart';
import 'package:bilibili_flutter/model/video_comment_entity.dart';
import 'package:bilibili_flutter/model/video_comment_wrapper_entity.dart';
import 'package:bilibili_flutter/model/video_detail_entity.dart';
import 'package:bilibili_flutter/model/video_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(MemberEntity).toString(): MemberEntity.fromJson,
		(RegionEntity).toString(): RegionEntity.fromJson,
		(RegionRegionCount).toString(): RegionRegionCount.fromJson,
		(TestEntity).toString(): TestEntity.fromJson,
		(VideoCommentEntity).toString(): VideoCommentEntity.fromJson,
		(VideoCommentContent).toString(): VideoCommentContent.fromJson,
		(VideoCommentContentJumpUrl).toString(): VideoCommentContentJumpUrl.fromJson,
		(VideoCommentFolder).toString(): VideoCommentFolder.fromJson,
		(VideoCommentMember).toString(): VideoCommentMember.fromJson,
		(VideoCommentMemberLevelInfo).toString(): VideoCommentMemberLevelInfo.fromJson,
		(VideoCommentMemberNameplate).toString(): VideoCommentMemberNameplate.fromJson,
		(VideoCommentMemberOfficialVerify).toString(): VideoCommentMemberOfficialVerify.fromJson,
		(VideoCommentMemberPendant).toString(): VideoCommentMemberPendant.fromJson,
		(VideoCommentMemberUserSailing).toString(): VideoCommentMemberUserSailing.fromJson,
		(VideoCommentMemberUserSailingCardbg).toString(): VideoCommentMemberUserSailingCardbg.fromJson,
		(VideoCommentMemberUserSailingCardbgFan).toString(): VideoCommentMemberUserSailingCardbgFan.fromJson,
		(VideoCommentMemberUserSailingPendant).toString(): VideoCommentMemberUserSailingPendant.fromJson,
		(VideoCommentMemberVip).toString(): VideoCommentMemberVip.fromJson,
		(VideoCommentMemberVipLabel).toString(): VideoCommentMemberVipLabel.fromJson,
		(VideoCommentReplyControl).toString(): VideoCommentReplyControl.fromJson,
		(VideoCommentUpAction).toString(): VideoCommentUpAction.fromJson,
		(VideoCommentWrapperEntity).toString(): VideoCommentWrapperEntity.fromJson,
		(VideoCommentWrapperCm).toString(): VideoCommentWrapperCm.fromJson,
		(VideoCommentWrapperCmInfo).toString(): VideoCommentWrapperCmInfo.fromJson,
		(VideoCommentWrapperConfig).toString(): VideoCommentWrapperConfig.fromJson,
		(VideoCommentWrapperControl).toString(): VideoCommentWrapperControl.fromJson,
		(VideoCommentWrapperCursor).toString(): VideoCommentWrapperCursor.fromJson,
		(VideoCommentWrapperEffects).toString(): VideoCommentWrapperEffects.fromJson,
		(VideoCommentWrapperFolder).toString(): VideoCommentWrapperFolder.fromJson,
		(VideoCommentWrapperTop).toString(): VideoCommentWrapperTop.fromJson,
		(VideoCommentWrapperUpSelection).toString(): VideoCommentWrapperUpSelection.fromJson,
		(VideoCommentWrapperUpper).toString(): VideoCommentWrapperUpper.fromJson,
		(VideoDetailEntity).toString(): VideoDetailEntity.fromJson,
		(VideoDetailCard).toString(): VideoDetailCard.fromJson,
		(VideoDetailCardCard).toString(): VideoDetailCardCard.fromJson,
		(VideoDetailCardCardOfficial).toString(): VideoDetailCardCardOfficial.fromJson,
		(VideoDetailCardCardLevelInfo).toString(): VideoDetailCardCardLevelInfo.fromJson,
		(VideoDetailCardCardNameplate).toString(): VideoDetailCardCardNameplate.fromJson,
		(VideoDetailCardCardOfficialVerify).toString(): VideoDetailCardCardOfficialVerify.fromJson,
		(VideoDetailCardCardPendant).toString(): VideoDetailCardCardPendant.fromJson,
		(VideoDetailCardCardVip).toString(): VideoDetailCardCardVip.fromJson,
		(VideoDetailCardCardVipLabel).toString(): VideoDetailCardCardVipLabel.fromJson,
		(VideoDetailCardSpace).toString(): VideoDetailCardSpace.fromJson,
		(VideoDetailRelated).toString(): VideoDetailRelated.fromJson,
		(VideoDetailRelatedDimension).toString(): VideoDetailRelatedDimension.fromJson,
		(VideoDetailRelatedOwner).toString(): VideoDetailRelatedOwner.fromJson,
		(VideoDetailRelatedRights).toString(): VideoDetailRelatedRights.fromJson,
		(VideoDetailRelatedStat).toString(): VideoDetailRelatedStat.fromJson,
		(VideoDetailReply).toString(): VideoDetailReply.fromJson,
		(VideoDetailReplyPage).toString(): VideoDetailReplyPage.fromJson,
		(VideoDetailReplyReplies).toString(): VideoDetailReplyReplies.fromJson,
		(VideoDetailReplyRepliesContent).toString(): VideoDetailReplyRepliesContent.fromJson,
		(VideoDetailTags).toString(): VideoDetailTags.fromJson,
		(VideoDetailTagsCount).toString(): VideoDetailTagsCount.fromJson,
		(VideoDetailView).toString(): VideoDetailView.fromJson,
		(VideoDetailViewDescV2).toString(): VideoDetailViewDescV2.fromJson,
		(VideoDetailViewDimension).toString(): VideoDetailViewDimension.fromJson,
		(VideoDetailViewHonorReply).toString(): VideoDetailViewHonorReply.fromJson,
		(VideoDetailViewHonorReplyHonor).toString(): VideoDetailViewHonorReplyHonor.fromJson,
		(VideoDetailViewLabel).toString(): VideoDetailViewLabel.fromJson,
		(VideoDetailViewOwner).toString(): VideoDetailViewOwner.fromJson,
		(VideoDetailViewPages).toString(): VideoDetailViewPages.fromJson,
		(VideoDetailViewPagesDimension).toString(): VideoDetailViewPagesDimension.fromJson,
		(VideoDetailViewRights).toString(): VideoDetailViewRights.fromJson,
		(VideoDetailViewStat).toString(): VideoDetailViewStat.fromJson,
		(VideoDetailViewSubtitle).toString(): VideoDetailViewSubtitle.fromJson,
		(VideoDetailViewSubtitleList).toString(): VideoDetailViewSubtitleList.fromJson,
		(VideoDetailViewSubtitleListAuthor).toString(): VideoDetailViewSubtitleListAuthor.fromJson,
		(VideoDetailViewUserGarb).toString(): VideoDetailViewUserGarb.fromJson,
		(VideoDetailHotShare).toString(): VideoDetailHotShare.fromJson,
		(VideoDetailViewAddit).toString(): VideoDetailViewAddit.fromJson,
		(VideoEntity).toString(): VideoEntity.fromJson,
		(VideoList).toString(): VideoList.fromJson,
		(VideoListDimension).toString(): VideoListDimension.fromJson,
		(VideoListOwner).toString(): VideoListOwner.fromJson,
		(VideoListRights).toString(): VideoListRights.fromJson,
		(VideoListStat).toString(): VideoListStat.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<MemberEntity>[] is M){
			return data.map<MemberEntity>((Map<String, dynamic> e) => MemberEntity.fromJson(e)).toList() as M;
		}
		if(<RegionEntity>[] is M){
			return data.map<RegionEntity>((Map<String, dynamic> e) => RegionEntity.fromJson(e)).toList() as M;
		}
		if(<RegionRegionCount>[] is M){
			return data.map<RegionRegionCount>((Map<String, dynamic> e) => RegionRegionCount.fromJson(e)).toList() as M;
		}
		if(<TestEntity>[] is M){
			return data.map<TestEntity>((Map<String, dynamic> e) => TestEntity.fromJson(e)).toList() as M;
		}
		if(<VideoCommentEntity>[] is M){
			return data.map<VideoCommentEntity>((Map<String, dynamic> e) => VideoCommentEntity.fromJson(e)).toList() as M;
		}
		if(<VideoCommentContent>[] is M){
			return data.map<VideoCommentContent>((Map<String, dynamic> e) => VideoCommentContent.fromJson(e)).toList() as M;
		}
		if(<VideoCommentContentJumpUrl>[] is M){
			return data.map<VideoCommentContentJumpUrl>((Map<String, dynamic> e) => VideoCommentContentJumpUrl.fromJson(e)).toList() as M;
		}
		if(<VideoCommentFolder>[] is M){
			return data.map<VideoCommentFolder>((Map<String, dynamic> e) => VideoCommentFolder.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMember>[] is M){
			return data.map<VideoCommentMember>((Map<String, dynamic> e) => VideoCommentMember.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberLevelInfo>[] is M){
			return data.map<VideoCommentMemberLevelInfo>((Map<String, dynamic> e) => VideoCommentMemberLevelInfo.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberNameplate>[] is M){
			return data.map<VideoCommentMemberNameplate>((Map<String, dynamic> e) => VideoCommentMemberNameplate.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberOfficialVerify>[] is M){
			return data.map<VideoCommentMemberOfficialVerify>((Map<String, dynamic> e) => VideoCommentMemberOfficialVerify.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberPendant>[] is M){
			return data.map<VideoCommentMemberPendant>((Map<String, dynamic> e) => VideoCommentMemberPendant.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberUserSailing>[] is M){
			return data.map<VideoCommentMemberUserSailing>((Map<String, dynamic> e) => VideoCommentMemberUserSailing.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberUserSailingCardbg>[] is M){
			return data.map<VideoCommentMemberUserSailingCardbg>((Map<String, dynamic> e) => VideoCommentMemberUserSailingCardbg.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberUserSailingCardbgFan>[] is M){
			return data.map<VideoCommentMemberUserSailingCardbgFan>((Map<String, dynamic> e) => VideoCommentMemberUserSailingCardbgFan.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberUserSailingPendant>[] is M){
			return data.map<VideoCommentMemberUserSailingPendant>((Map<String, dynamic> e) => VideoCommentMemberUserSailingPendant.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberVip>[] is M){
			return data.map<VideoCommentMemberVip>((Map<String, dynamic> e) => VideoCommentMemberVip.fromJson(e)).toList() as M;
		}
		if(<VideoCommentMemberVipLabel>[] is M){
			return data.map<VideoCommentMemberVipLabel>((Map<String, dynamic> e) => VideoCommentMemberVipLabel.fromJson(e)).toList() as M;
		}
		if(<VideoCommentReplyControl>[] is M){
			return data.map<VideoCommentReplyControl>((Map<String, dynamic> e) => VideoCommentReplyControl.fromJson(e)).toList() as M;
		}
		if(<VideoCommentUpAction>[] is M){
			return data.map<VideoCommentUpAction>((Map<String, dynamic> e) => VideoCommentUpAction.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperEntity>[] is M){
			return data.map<VideoCommentWrapperEntity>((Map<String, dynamic> e) => VideoCommentWrapperEntity.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperCm>[] is M){
			return data.map<VideoCommentWrapperCm>((Map<String, dynamic> e) => VideoCommentWrapperCm.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperCmInfo>[] is M){
			return data.map<VideoCommentWrapperCmInfo>((Map<String, dynamic> e) => VideoCommentWrapperCmInfo.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperConfig>[] is M){
			return data.map<VideoCommentWrapperConfig>((Map<String, dynamic> e) => VideoCommentWrapperConfig.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperControl>[] is M){
			return data.map<VideoCommentWrapperControl>((Map<String, dynamic> e) => VideoCommentWrapperControl.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperCursor>[] is M){
			return data.map<VideoCommentWrapperCursor>((Map<String, dynamic> e) => VideoCommentWrapperCursor.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperEffects>[] is M){
			return data.map<VideoCommentWrapperEffects>((Map<String, dynamic> e) => VideoCommentWrapperEffects.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperFolder>[] is M){
			return data.map<VideoCommentWrapperFolder>((Map<String, dynamic> e) => VideoCommentWrapperFolder.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperTop>[] is M){
			return data.map<VideoCommentWrapperTop>((Map<String, dynamic> e) => VideoCommentWrapperTop.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperUpSelection>[] is M){
			return data.map<VideoCommentWrapperUpSelection>((Map<String, dynamic> e) => VideoCommentWrapperUpSelection.fromJson(e)).toList() as M;
		}
		if(<VideoCommentWrapperUpper>[] is M){
			return data.map<VideoCommentWrapperUpper>((Map<String, dynamic> e) => VideoCommentWrapperUpper.fromJson(e)).toList() as M;
		}
		if(<VideoDetailEntity>[] is M){
			return data.map<VideoDetailEntity>((Map<String, dynamic> e) => VideoDetailEntity.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCard>[] is M){
			return data.map<VideoDetailCard>((Map<String, dynamic> e) => VideoDetailCard.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCard>[] is M){
			return data.map<VideoDetailCardCard>((Map<String, dynamic> e) => VideoDetailCardCard.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardOfficial>[] is M){
			return data.map<VideoDetailCardCardOfficial>((Map<String, dynamic> e) => VideoDetailCardCardOfficial.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardLevelInfo>[] is M){
			return data.map<VideoDetailCardCardLevelInfo>((Map<String, dynamic> e) => VideoDetailCardCardLevelInfo.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardNameplate>[] is M){
			return data.map<VideoDetailCardCardNameplate>((Map<String, dynamic> e) => VideoDetailCardCardNameplate.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardOfficialVerify>[] is M){
			return data.map<VideoDetailCardCardOfficialVerify>((Map<String, dynamic> e) => VideoDetailCardCardOfficialVerify.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardPendant>[] is M){
			return data.map<VideoDetailCardCardPendant>((Map<String, dynamic> e) => VideoDetailCardCardPendant.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardVip>[] is M){
			return data.map<VideoDetailCardCardVip>((Map<String, dynamic> e) => VideoDetailCardCardVip.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardCardVipLabel>[] is M){
			return data.map<VideoDetailCardCardVipLabel>((Map<String, dynamic> e) => VideoDetailCardCardVipLabel.fromJson(e)).toList() as M;
		}
		if(<VideoDetailCardSpace>[] is M){
			return data.map<VideoDetailCardSpace>((Map<String, dynamic> e) => VideoDetailCardSpace.fromJson(e)).toList() as M;
		}
		if(<VideoDetailRelated>[] is M){
			return data.map<VideoDetailRelated>((Map<String, dynamic> e) => VideoDetailRelated.fromJson(e)).toList() as M;
		}
		if(<VideoDetailRelatedDimension>[] is M){
			return data.map<VideoDetailRelatedDimension>((Map<String, dynamic> e) => VideoDetailRelatedDimension.fromJson(e)).toList() as M;
		}
		if(<VideoDetailRelatedOwner>[] is M){
			return data.map<VideoDetailRelatedOwner>((Map<String, dynamic> e) => VideoDetailRelatedOwner.fromJson(e)).toList() as M;
		}
		if(<VideoDetailRelatedRights>[] is M){
			return data.map<VideoDetailRelatedRights>((Map<String, dynamic> e) => VideoDetailRelatedRights.fromJson(e)).toList() as M;
		}
		if(<VideoDetailRelatedStat>[] is M){
			return data.map<VideoDetailRelatedStat>((Map<String, dynamic> e) => VideoDetailRelatedStat.fromJson(e)).toList() as M;
		}
		if(<VideoDetailReply>[] is M){
			return data.map<VideoDetailReply>((Map<String, dynamic> e) => VideoDetailReply.fromJson(e)).toList() as M;
		}
		if(<VideoDetailReplyPage>[] is M){
			return data.map<VideoDetailReplyPage>((Map<String, dynamic> e) => VideoDetailReplyPage.fromJson(e)).toList() as M;
		}
		if(<VideoDetailReplyReplies>[] is M){
			return data.map<VideoDetailReplyReplies>((Map<String, dynamic> e) => VideoDetailReplyReplies.fromJson(e)).toList() as M;
		}
		if(<VideoDetailReplyRepliesContent>[] is M){
			return data.map<VideoDetailReplyRepliesContent>((Map<String, dynamic> e) => VideoDetailReplyRepliesContent.fromJson(e)).toList() as M;
		}
		if(<VideoDetailTags>[] is M){
			return data.map<VideoDetailTags>((Map<String, dynamic> e) => VideoDetailTags.fromJson(e)).toList() as M;
		}
		if(<VideoDetailTagsCount>[] is M){
			return data.map<VideoDetailTagsCount>((Map<String, dynamic> e) => VideoDetailTagsCount.fromJson(e)).toList() as M;
		}
		if(<VideoDetailView>[] is M){
			return data.map<VideoDetailView>((Map<String, dynamic> e) => VideoDetailView.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewDescV2>[] is M){
			return data.map<VideoDetailViewDescV2>((Map<String, dynamic> e) => VideoDetailViewDescV2.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewDimension>[] is M){
			return data.map<VideoDetailViewDimension>((Map<String, dynamic> e) => VideoDetailViewDimension.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewHonorReply>[] is M){
			return data.map<VideoDetailViewHonorReply>((Map<String, dynamic> e) => VideoDetailViewHonorReply.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewHonorReplyHonor>[] is M){
			return data.map<VideoDetailViewHonorReplyHonor>((Map<String, dynamic> e) => VideoDetailViewHonorReplyHonor.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewLabel>[] is M){
			return data.map<VideoDetailViewLabel>((Map<String, dynamic> e) => VideoDetailViewLabel.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewOwner>[] is M){
			return data.map<VideoDetailViewOwner>((Map<String, dynamic> e) => VideoDetailViewOwner.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewPages>[] is M){
			return data.map<VideoDetailViewPages>((Map<String, dynamic> e) => VideoDetailViewPages.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewPagesDimension>[] is M){
			return data.map<VideoDetailViewPagesDimension>((Map<String, dynamic> e) => VideoDetailViewPagesDimension.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewRights>[] is M){
			return data.map<VideoDetailViewRights>((Map<String, dynamic> e) => VideoDetailViewRights.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewStat>[] is M){
			return data.map<VideoDetailViewStat>((Map<String, dynamic> e) => VideoDetailViewStat.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewSubtitle>[] is M){
			return data.map<VideoDetailViewSubtitle>((Map<String, dynamic> e) => VideoDetailViewSubtitle.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewSubtitleList>[] is M){
			return data.map<VideoDetailViewSubtitleList>((Map<String, dynamic> e) => VideoDetailViewSubtitleList.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewSubtitleListAuthor>[] is M){
			return data.map<VideoDetailViewSubtitleListAuthor>((Map<String, dynamic> e) => VideoDetailViewSubtitleListAuthor.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewUserGarb>[] is M){
			return data.map<VideoDetailViewUserGarb>((Map<String, dynamic> e) => VideoDetailViewUserGarb.fromJson(e)).toList() as M;
		}
		if(<VideoDetailHotShare>[] is M){
			return data.map<VideoDetailHotShare>((Map<String, dynamic> e) => VideoDetailHotShare.fromJson(e)).toList() as M;
		}
		if(<VideoDetailViewAddit>[] is M){
			return data.map<VideoDetailViewAddit>((Map<String, dynamic> e) => VideoDetailViewAddit.fromJson(e)).toList() as M;
		}
		if(<VideoEntity>[] is M){
			return data.map<VideoEntity>((Map<String, dynamic> e) => VideoEntity.fromJson(e)).toList() as M;
		}
		if(<VideoList>[] is M){
			return data.map<VideoList>((Map<String, dynamic> e) => VideoList.fromJson(e)).toList() as M;
		}
		if(<VideoListDimension>[] is M){
			return data.map<VideoListDimension>((Map<String, dynamic> e) => VideoListDimension.fromJson(e)).toList() as M;
		}
		if(<VideoListOwner>[] is M){
			return data.map<VideoListOwner>((Map<String, dynamic> e) => VideoListOwner.fromJson(e)).toList() as M;
		}
		if(<VideoListRights>[] is M){
			return data.map<VideoListRights>((Map<String, dynamic> e) => VideoListRights.fromJson(e)).toList() as M;
		}
		if(<VideoListStat>[] is M){
			return data.map<VideoListStat>((Map<String, dynamic> e) => VideoListStat.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}